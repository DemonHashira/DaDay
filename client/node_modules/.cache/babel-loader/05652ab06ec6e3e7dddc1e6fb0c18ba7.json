{"ast":null,"code":"import { baseUrl } from \"../constants\";\n\nconst register = async data => {\n  if (data.password != data.repeatPassword) {\n    throw new Error('Passwords must match!');\n  }\n\n  const reqBody = {\n    username: data.username,\n    password: data.password,\n    profile: {\n      parent_email: data.parentEmail,\n      avatar: Number(data.avatar)\n    }\n  };\n  const response = await fetch(`${baseUrl}/auth/register/`, {\n    method: 'POST',\n    body: JSON.stringify(reqBody),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const responseData = await response.json();\n  localStorage.setItem('user', JSON.stringify({\n    username: data.username,\n    token: responseData.token\n  }));\n\n  if (!response.ok) {\n    throw new Error(responseData);\n  }\n\n  return responseData;\n};\n\nconst login = async data => {\n  const response = await fetch(`${baseUrl}/auth/login/`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(responseData);\n  }\n\n  localStorage.setItem('user', JSON.stringify(responseData));\n  return responseData;\n};\n\nexport const authService = {\n  register,\n  login\n};","map":{"version":3,"sources":["/Users/alexandrinamehandzhiyska/Documents/alex/education/projects/da-day/DaDay/client/src/services/authService.js"],"names":["baseUrl","register","data","password","repeatPassword","Error","reqBody","username","profile","parent_email","parentEmail","avatar","Number","response","fetch","method","body","JSON","stringify","headers","responseData","json","localStorage","setItem","token","ok","login","authService"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;;AAEA,MAAMC,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC7B,MAAIA,IAAI,CAACC,QAAL,IAAiBD,IAAI,CAACE,cAA1B,EAA0C;AACtC,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAGD,QAAMC,OAAO,GAAG;AACZC,IAAAA,QAAQ,EAAEL,IAAI,CAACK,QADH;AAEZJ,IAAAA,QAAQ,EAAED,IAAI,CAACC,QAFH;AAGZK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,YAAY,EAAEP,IAAI,CAACQ,WAArB;AAAkCC,MAAAA,MAAM,EAAEC,MAAM,CAACV,IAAI,CAACS,MAAN;AAAhD;AAHG,GAAhB;AAMA,QAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEd,OAAQ,iBAAZ,EAA8B;AACtDe,IAAAA,MAAM,EAAE,MAD8C;AAEtDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAFgD;AAGtDa,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAH6C,GAA9B,CAA5B;AAQA,QAAMC,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B;AACAC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAAI,CAACC,SAAL,CAAe;AAAEX,IAAAA,QAAQ,EAAEL,IAAI,CAACK,QAAjB;AAA2BiB,IAAAA,KAAK,EAAEJ,YAAY,CAACI;AAA/C,GAAf,CAA7B;;AAEA,MAAI,CAACX,QAAQ,CAACY,EAAd,EAAkB;AACd,UAAM,IAAIpB,KAAJ,CAAUe,YAAV,CAAN;AACH;;AAED,SAAOA,YAAP;AACH,CA5BD;;AA8BA,MAAMM,KAAK,GAAG,MAAOxB,IAAP,IAAgB;AAC1B,QAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEd,OAAQ,cAAZ,EAA2B;AACnDe,IAAAA,MAAM,EAAE,MAD2C;AAEnDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAehB,IAAf,CAF6C;AAGnDiB,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAH0C,GAA3B,CAA5B;AAQA,QAAMC,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B;;AAEA,MAAI,CAACR,QAAQ,CAACY,EAAd,EAAkB;AACd,UAAM,IAAIpB,KAAJ,CAAUe,YAAV,CAAN;AACH;;AAEDE,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BN,IAAI,CAACC,SAAL,CAAeE,YAAf,CAA7B;AACA,SAAOA,YAAP;AACH,CAjBD;;AAmBA,OAAO,MAAMO,WAAW,GAAG;AAAE1B,EAAAA,QAAF;AAAYyB,EAAAA;AAAZ,CAApB","sourcesContent":["import { baseUrl } from \"../constants\";\n\nconst register = async (data) => {\n    if (data.password != data.repeatPassword) {\n        throw new Error('Passwords must match!');\n    }\n\n\n    const reqBody = { \n        username: data.username, \n        password: data.password, \n        profile: { parent_email: data.parentEmail, avatar: Number(data.avatar) }\n    };\n\n    const response = await fetch(`${baseUrl}/auth/register/`, {\n        method: 'POST',\n        body: JSON.stringify(reqBody),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const responseData = await response.json();\n    localStorage.setItem('user', JSON.stringify({ username: data.username, token: responseData.token }));\n\n    if (!response.ok) {\n        throw new Error(responseData);\n    }\n\n    return responseData;\n}\n\nconst login = async (data) => {\n    const response = await fetch(`${baseUrl}/auth/login/`, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const responseData = await response.json();\n\n    if (!response.ok) {\n        throw new Error(responseData);\n    }\n\n    localStorage.setItem('user', JSON.stringify(responseData));\n    return responseData;\n}\n\nexport const authService = { register, login };"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { baseUrl } from \"../constants\";\n\nconst register = async data => {\n  let avatar;\n\n  if (data.cat) {\n    avatar = 1;\n  } else if (data.duck) {\n    avatar = 2;\n  } else {\n    avatar = 3;\n  }\n\n  console.log(avatar); // if (data.password != data.repeatPassword) {\n  //     throw new Error('Passwords must match!');\n  // }\n  // const reqBody = { \n  //     username: data.username, \n  //     password: data.password, \n  //     profile: { parent_email: data.parentEmail, avatar: Number(avatar) }\n  // };\n  // const response = await fetch(`${baseUrl}/auth/register/`, {\n  //     method: 'POST',\n  //     body: JSON.stringify(reqBody),\n  //     headers: {\n  //         'Content-Type': 'application/json'\n  //     }\n  // });\n  // const responseData = await response.json();\n  // if (!response.ok) {\n  //     throw new Error(responseData);\n  // }\n  // login({ username: data.username, password: data.password });\n};\n\nconst login = async data => {\n  const response = await fetch(`${baseUrl}/auth/login/`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(responseData);\n  }\n\n  localStorage.setItem('user', JSON.stringify(responseData));\n  return responseData;\n};\n\nexport const authService = {\n  register,\n  login\n};","map":{"version":3,"sources":["/Users/alexandrinamehandzhiyska/Documents/alex/education/projects/da-day/DaDay/client/src/services/authService.js"],"names":["baseUrl","register","data","avatar","cat","duck","console","log","login","response","fetch","method","body","JSON","stringify","headers","responseData","json","ok","Error","localStorage","setItem","authService"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;;AAEA,MAAMC,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC7B,MAAIC,MAAJ;;AAEA,MAAID,IAAI,CAACE,GAAT,EAAc;AACVD,IAAAA,MAAM,GAAG,CAAT;AACH,GAFD,MAEO,IAAID,IAAI,CAACG,IAAT,EAAe;AAClBF,IAAAA,MAAM,GAAG,CAAT;AACH,GAFM,MAEA;AACHA,IAAAA,MAAM,GAAG,CAAT;AACH;;AAEDG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ,EAX6B,CAY7B;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACH,CArCD;;AAuCA,MAAMK,KAAK,GAAG,MAAON,IAAP,IAAgB;AAC1B,QAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEV,OAAQ,cAAZ,EAA2B;AACnDW,IAAAA,MAAM,EAAE,MAD2C;AAEnDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeZ,IAAf,CAF6C;AAGnDa,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAH0C,GAA3B,CAA5B;AAQA,QAAMC,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B;;AAEA,MAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;AACd,UAAM,IAAIC,KAAJ,CAAUH,YAAV,CAAN;AACH;;AAEDI,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACC,SAAL,CAAeE,YAAf,CAA7B;AACA,SAAOA,YAAP;AACH,CAjBD;;AAmBA,OAAO,MAAMM,WAAW,GAAG;AAAErB,EAAAA,QAAF;AAAYO,EAAAA;AAAZ,CAApB","sourcesContent":["import { baseUrl } from \"../constants\";\n\nconst register = async (data) => {\n    let avatar;\n\n    if (data.cat) {\n        avatar = 1;\n    } else if (data.duck) {\n        avatar = 2;\n    } else {\n        avatar = 3;\n    }\n\n    console.log(avatar);\n    // if (data.password != data.repeatPassword) {\n    //     throw new Error('Passwords must match!');\n    // }\n\n    // const reqBody = { \n    //     username: data.username, \n    //     password: data.password, \n    //     profile: { parent_email: data.parentEmail, avatar: Number(avatar) }\n    // };\n\n    // const response = await fetch(`${baseUrl}/auth/register/`, {\n    //     method: 'POST',\n    //     body: JSON.stringify(reqBody),\n    //     headers: {\n    //         'Content-Type': 'application/json'\n    //     }\n    // });\n\n    // const responseData = await response.json();\n\n    // if (!response.ok) {\n    //     throw new Error(responseData);\n    // }\n\n    // login({ username: data.username, password: data.password });\n}\n\nconst login = async (data) => {\n    const response = await fetch(`${baseUrl}/auth/login/`, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const responseData = await response.json();\n\n    if (!response.ok) {\n        throw new Error(responseData);\n    }\n\n    localStorage.setItem('user', JSON.stringify(responseData));\n    return responseData;\n}\n\nexport const authService = { register, login };"]},"metadata":{},"sourceType":"module"}
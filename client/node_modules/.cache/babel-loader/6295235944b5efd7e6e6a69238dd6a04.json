{"ast":null,"code":"import { baseUrl } from \"../constants\";\n\nconst register = async data => {\n  let avatar;\n\n  if (data.cat) {\n    avatar = 1;\n  } else if (data.duck) {\n    avatar = 2;\n  } else {\n    avatar = 3;\n  }\n\n  console.log(avatar);\n\n  if (data.password != data.repeatPassword) {\n    throw new Error('Passwords must match!');\n  }\n\n  const reqBody = {\n    username: data.username,\n    password: data.password,\n    profile: {\n      parent_email: data.parentEmail,\n      avatar: Number(avatar)\n    }\n  };\n  const response = await fetch(`${baseUrl}/auth/register/`, {\n    method: 'POST',\n    body: JSON.stringify(reqBody),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const responseData = await response.json(); // localStorage.setItem('user', JSON.stringify({ username: data.username, token: responseData.token }));\n\n  if (!response.ok) {\n    throw new Error(responseData);\n  }\n\n  login({\n    username: data.username,\n    password: data.password\n  });\n};\n\nconst login = async data => {\n  const response = await fetch(`${baseUrl}/auth/login/`, {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  });\n  const responseData = await response.json();\n\n  if (!response.ok) {\n    throw new Error(responseData);\n  }\n\n  localStorage.setItem('user', JSON.stringify(responseData));\n  return responseData;\n};\n\nexport const authService = {\n  register,\n  login\n};","map":{"version":3,"sources":["/Users/alexandrinamehandzhiyska/Documents/alex/education/projects/da-day/DaDay/client/src/services/authService.js"],"names":["baseUrl","register","data","avatar","cat","duck","console","log","password","repeatPassword","Error","reqBody","username","profile","parent_email","parentEmail","Number","response","fetch","method","body","JSON","stringify","headers","responseData","json","ok","login","localStorage","setItem","authService"],"mappings":"AAAA,SAASA,OAAT,QAAwB,cAAxB;;AAEA,MAAMC,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC7B,MAAIC,MAAJ;;AAEA,MAAID,IAAI,CAACE,GAAT,EAAc;AACVD,IAAAA,MAAM,GAAG,CAAT;AACH,GAFD,MAEO,IAAID,IAAI,CAACG,IAAT,EAAe;AAClBF,IAAAA,MAAM,GAAG,CAAT;AACH,GAFM,MAEA;AACHA,IAAAA,MAAM,GAAG,CAAT;AACH;;AAEDG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;;AACA,MAAID,IAAI,CAACM,QAAL,IAAiBN,IAAI,CAACO,cAA1B,EAA0C;AACtC,UAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;AAED,QAAMC,OAAO,GAAG;AACZC,IAAAA,QAAQ,EAAEV,IAAI,CAACU,QADH;AAEZJ,IAAAA,QAAQ,EAAEN,IAAI,CAACM,QAFH;AAGZK,IAAAA,OAAO,EAAE;AAAEC,MAAAA,YAAY,EAAEZ,IAAI,CAACa,WAArB;AAAkCZ,MAAAA,MAAM,EAAEa,MAAM,CAACb,MAAD;AAAhD;AAHG,GAAhB;AAMA,QAAMc,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAElB,OAAQ,iBAAZ,EAA8B;AACtDmB,IAAAA,MAAM,EAAE,MAD8C;AAEtDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,OAAf,CAFgD;AAGtDY,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAH6C,GAA9B,CAA5B;AAQA,QAAMC,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B,CA9B6B,CA+B7B;;AAEA,MAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;AACd,UAAM,IAAIhB,KAAJ,CAAUc,YAAV,CAAN;AACH;;AAEDG,EAAAA,KAAK,CAAC;AAAEf,IAAAA,QAAQ,EAAEV,IAAI,CAACU,QAAjB;AAA2BJ,IAAAA,QAAQ,EAAEN,IAAI,CAACM;AAA1C,GAAD,CAAL;AACH,CAtCD;;AAwCA,MAAMmB,KAAK,GAAG,MAAOzB,IAAP,IAAgB;AAC1B,QAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAElB,OAAQ,cAAZ,EAA2B;AACnDmB,IAAAA,MAAM,EAAE,MAD2C;AAEnDC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAepB,IAAf,CAF6C;AAGnDqB,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAH0C,GAA3B,CAA5B;AAQA,QAAMC,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B;;AAEA,MAAI,CAACR,QAAQ,CAACS,EAAd,EAAkB;AACd,UAAM,IAAIhB,KAAJ,CAAUc,YAAV,CAAN;AACH;;AAEDI,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BR,IAAI,CAACC,SAAL,CAAeE,YAAf,CAA7B;AACA,SAAOA,YAAP;AACH,CAjBD;;AAmBA,OAAO,MAAMM,WAAW,GAAG;AAAE7B,EAAAA,QAAF;AAAY0B,EAAAA;AAAZ,CAApB","sourcesContent":["import { baseUrl } from \"../constants\";\n\nconst register = async (data) => {\n    let avatar;\n\n    if (data.cat) {\n        avatar = 1;\n    } else if (data.duck) {\n        avatar = 2;\n    } else {\n        avatar = 3;\n    }\n\n    console.log(avatar);\n    if (data.password != data.repeatPassword) {\n        throw new Error('Passwords must match!');\n    }\n\n    const reqBody = { \n        username: data.username, \n        password: data.password, \n        profile: { parent_email: data.parentEmail, avatar: Number(avatar) }\n    };\n\n    const response = await fetch(`${baseUrl}/auth/register/`, {\n        method: 'POST',\n        body: JSON.stringify(reqBody),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const responseData = await response.json();\n    // localStorage.setItem('user', JSON.stringify({ username: data.username, token: responseData.token }));\n\n    if (!response.ok) {\n        throw new Error(responseData);\n    }\n\n    login({ username: data.username, password: data.password });\n}\n\nconst login = async (data) => {\n    const response = await fetch(`${baseUrl}/auth/login/`, {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    });\n\n    const responseData = await response.json();\n\n    if (!response.ok) {\n        throw new Error(responseData);\n    }\n\n    localStorage.setItem('user', JSON.stringify(responseData));\n    return responseData;\n}\n\nexport const authService = { register, login };"]},"metadata":{},"sourceType":"module"}